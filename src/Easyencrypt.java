
import java.awt.Toolkit;
import java.util.Arrays;
import java.util.HashMap;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Evita Sembiring, Susi Purba, Sarah
 */
public class Easyencrypt extends javax.swing.JFrame {

    int[] encrypted;
    String newPlainText;
    String setKey;
    
    
    public static HashMap<Character, Integer> newPlaintextIndexes = new HashMap<Character, Integer>();

    public static HashMap<Character, Integer> newKeyIndexes = new HashMap<Character, Integer>();

    /**
     * Creates new form Easyencode
     */
    public Easyencrypt() {
        initComponents();
        setIcon();
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        plainTextArea = new javax.swing.JTextArea();
        lengthOfKeyField = new javax.swing.JTextField();
        lengthOfKeyLabel = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        infoButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        plainTextLabel = new javax.swing.JLabel();
        generateButton = new javax.swing.JButton();
        newPlainTextLabel = new javax.swing.JLabel();
        keyLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        newPlaintextField = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        keyField = new javax.swing.JTextArea();
        encryptButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        CipherArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        keyPasswordField = new javax.swing.JPasswordField();
        decrypt = new javax.swing.JButton();
        memoryUsageLabel = new javax.swing.JLabel();
        runTimeLabel = new javax.swing.JLabel();
        memoryUsageField = new javax.swing.JTextField();
        runTimeField = new javax.swing.JTextField();
        totalCharLabel = new javax.swing.JLabel();
        totalCharField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        clearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Easy Encrypt 1.0");

        plainTextArea.setColumns(20);
        plainTextArea.setLineWrap(true);
        plainTextArea.setRows(5);
        plainTextArea.setMargin(null);
        plainTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                plainTextAreaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(plainTextArea);

        lengthOfKeyField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lengthOfKeyField.setToolTipText("Key should begin with '@' followed by a mixture of five letters and two numbers");
        lengthOfKeyField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lengthOfKeyFieldActionPerformed(evt);
            }
        });

        lengthOfKeyLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lengthOfKeyLabel.setText("Set the Length of Key");

        jToolBar1.setRollover(true);

        infoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8_Info_20px_1.png"))); // NOI18N
        infoButton.setText("Info");
        infoButton.setFocusable(false);
        infoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(infoButton);

        helpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8_Help_20px.png"))); // NOI18N
        helpButton.setText("Help");
        helpButton.setFocusable(false);
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(helpButton);

        plainTextLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        plainTextLabel.setText("Plaintext:");

        generateButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        generateButton.setText("Generate");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        newPlainTextLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        newPlainTextLabel.setText("It's Your Plaintext Modification:");

        keyLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyLabel.setText("It's Your Key:");

        newPlaintextField.setColumns(20);
        newPlaintextField.setRows(5);
        newPlaintextField.setEditable(false);
        newPlaintextField.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                newPlaintextFieldCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                newPlaintextFieldInputMethodTextChanged(evt);
            }
        });
        jScrollPane2.setViewportView(newPlaintextField);

        keyField.setColumns(20);
        keyField.setRows(5);
        keyField.setEditable(false);
        jScrollPane3.setViewportView(keyField);

        encryptButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        encryptButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8_Encrypt_48px.png"))); // NOI18N
        encryptButton.setText("Encrypt");
        encryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Ciphertext:");

        CipherArea.setColumns(20);
        CipherArea.setRows(5);
        CipherArea.setEditable(false);
        jScrollPane4.setViewportView(CipherArea);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("To proof the algorithm, you can decrypty your ciphertext below.");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Please type your key:");

        keyPasswordField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyPasswordFieldActionPerformed(evt);
            }
        });

        decrypt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        decrypt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8_Data_Encryption_48px.png"))); // NOI18N
        decrypt.setText("Decrypt");
        decrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptActionPerformed(evt);
            }
        });

        memoryUsageLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        memoryUsageLabel.setText("Memory usage:");

        runTimeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        runTimeLabel.setText("Java RunTime is: ");

        memoryUsageField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        runTimeField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        runTimeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runTimeFieldActionPerformed(evt);
            }
        });

        totalCharLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        totalCharLabel.setText("Total character usage in plaintext: ");

        totalCharField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        totalCharField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalCharFieldActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Characters");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Bits");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("ms");

        clearButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(plainTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(keyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lengthOfKeyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(newPlainTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(151, 151, 151))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(lengthOfKeyField, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(43, 43, 43)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(runTimeField, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                                    .addComponent(runTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(memoryUsageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(memoryUsageField)
                                    .addComponent(totalCharLabel)
                                    .addComponent(totalCharField))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addGap(521, 521, 521))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(encryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(decrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(keyPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(56, 56, 56))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(plainTextLabel)
                            .addComponent(lengthOfKeyLabel))
                        .addGap(7, 7, 7)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lengthOfKeyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(generateButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(totalCharLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(totalCharField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(9, 9, 9)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newPlainTextLabel)
                            .addComponent(memoryUsageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(memoryUsageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(runTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(runTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addGap(0, 7, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addComponent(keyLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(12, 12, 12)
                .addComponent(encryptButton)
                .addGap(1, 1, 1)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keyPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decrypt)
                .addContainerGap(102, Short.MAX_VALUE))
        );

        memoryUsageField.setEditable(false);
        runTimeField.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void keyPasswordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyPasswordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keyPasswordFieldActionPerformed

    private void encryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptButtonActionPerformed

            String newPlainText = newPlaintextField.getText();
            String key = keyField.getText();
            String encrypted = encrypt(newPlainText, key);
            CipherArea.setText(encrypted);
            System.out.println(encrypted);

            for(int i = 0; i < newPlainText.length(); i++) {
                String arrOfEnkripsi = String.valueOf(encrypted);
                CipherArea.setText(arrOfEnkripsi);
            }
            
            //get  the Java runTime for memory
            Runtime runtime = Runtime.getRuntime();

            //run the garbage collector
            runtime.gc();

            //calculate the used memory
            long memory = runtime.totalMemory() - runtime.freeMemory();

            String parsingLongToString = String.valueOf(memory);
            memoryUsageField.setText(parsingLongToString);


            //get The Java RunTime
            long startTime = System.currentTimeMillis();

            long total = 0;
            for (int i = 0; i < 10000000; i++){
                total += i;
            }


            long stopTime = System.currentTimeMillis();
            long elapsedTime = stopTime - startTime;

            String parsingLongToString1 = String.valueOf(elapsedTime);
            runTimeField.setText(parsingLongToString1);

    }//GEN-LAST:event_encryptButtonActionPerformed

    private void newPlaintextFieldCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_newPlaintextFieldCaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_newPlaintextFieldCaretPositionChanged

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        String str = plainTextArea.getText();
        int length = str.length();
        String myString = Integer.toString(length);
        totalCharField.setText(myString);
        
        try{
            String plainText = plainTextArea.getText();
            int lengthOfKey = Integer.parseInt(lengthOfKeyField.getText());
            String message = removeDuplicate(plainText);
            String newPlainText = setNewPlainText(message, lengthOfKey);
            String key = setNewKey(message, lengthOfKey);

            newPlaintextField.setText(newPlainText);
            keyField.setText(key);

        }
        catch (Exception e){
            String message = "Jumlah key tidak valid";
            JOptionPane.showMessageDialog(null, message);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_generateButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        Help s = new Help();
        s.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_helpButtonActionPerformed

    private void infoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoButtonActionPerformed
        JOptionPane.showMessageDialog(null, "<html><body><p><h1>Easy Encrypt <img src = icons8_Secure_48px.png></img></h1></p>"
            + "<p><h3>Version 1.0.0</h3></p>"
            + "<p>by Official-Hord</p>"
            + "</body></html>");

        // TODO add your handling code here:
    }//GEN-LAST:event_infoButtonActionPerformed

    private void lengthOfKeyFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lengthOfKeyFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lengthOfKeyFieldActionPerformed

    private void plainTextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_plainTextAreaKeyTyped

        // TODO add your handling code here:
    }//GEN-LAST:event_plainTextAreaKeyTyped

    private void decryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptActionPerformed
        // TODO add your handling code here
        try{
        String cipher = CipherArea.getText();
        String output = decrypt(cipher, keyPasswordField.getText());
        String hasilDekripsi = decrypt(cipher, keyField.getText());
        
        
        char[] stringToCharArray1 = hasilDekripsi.toCharArray();
        if (output == null ? hasilDekripsi == null : output.equals(hasilDekripsi)) {
                for (char decrypted : stringToCharArray1) {
                    int idx = newPlaintextIndexes.get(decrypted);
                    String plaintextIndex =plainTextArea.getText();
                    
                    if (plaintextIndex.charAt(idx) == decrypted) {
                       String message = "Dengan menggunakan key: "+keyPasswordField.getText()+"\n ciphertext yang terdekripsi menghasilkan "+plaintextIndex;
                       JOptionPane.showMessageDialog(null, message);
                    }
                 break; 
                }
                
        }         
       }
       catch(Exception e){
           JOptionPane.showMessageDialog(null, "Key tidak valid, key seharusnya: "+keyField.getText());
           
       }
        //get  the Java runTime for memory
        Runtime runtime = Runtime.getRuntime();

        //run the garbage collector
        runtime.gc();

        //calculate the used memory
        long memory = runtime.totalMemory() - runtime.freeMemory();

        String parsingLongToString = String.valueOf(memory);
        memoryUsageField.setText(parsingLongToString);


        //get The Java RunTime
        long startTime = System.currentTimeMillis();

        long total = 0;
        for (int i = 0; i < 10000000; i++){
            total += i;
        }


        long stopTime = System.currentTimeMillis();
        long elapsedTime = stopTime - startTime;

        String parsingLongToString1 = String.valueOf(elapsedTime);
        runTimeField.setText(parsingLongToString1);

       
    }//GEN-LAST:event_decryptActionPerformed

    private void newPlaintextFieldInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_newPlaintextFieldInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_newPlaintextFieldInputMethodTextChanged

    private void runTimeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runTimeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_runTimeFieldActionPerformed

    private void totalCharFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalCharFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalCharFieldActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        plainTextArea.setText("");
        lengthOfKeyField.setText("");
        newPlaintextField.setText("");
        keyField.setText("");
        CipherArea.setText("");
        keyPasswordField.setText("");
        memoryUsageField.setText("");
        runTimeField.setText("");
        totalCharField.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icons8_Secure_48px.png")));

    }

    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Easyencrypt.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Easyencrypt.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Easyencrypt.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Easyencrypt.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Easyencrypt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea CipherArea;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton decrypt;
    private javax.swing.JButton encryptButton;
    private javax.swing.JButton generateButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JButton infoButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextArea keyField;
    private javax.swing.JLabel keyLabel;
    private javax.swing.JPasswordField keyPasswordField;
    private javax.swing.JTextField lengthOfKeyField;
    private javax.swing.JLabel lengthOfKeyLabel;
    private javax.swing.JTextField memoryUsageField;
    private javax.swing.JLabel memoryUsageLabel;
    private javax.swing.JLabel newPlainTextLabel;
    private javax.swing.JTextArea newPlaintextField;
    private javax.swing.JTextArea plainTextArea;
    private javax.swing.JLabel plainTextLabel;
    private javax.swing.JTextField runTimeField;
    private javax.swing.JLabel runTimeLabel;
    private javax.swing.JTextField totalCharField;
    private javax.swing.JLabel totalCharLabel;
    // End of variables declaration//GEN-END:variables
String Algorithm;

    public String removeDuplicate(String plainText) {
        int len = plainText.length();
        for(int i=0;i<len-1;i++){
            char c = plainText.charAt(i);
            String preString = plainText.substring(0,i+1);
            String temp = plainText.substring(i+1);
            temp = temp.replaceAll(""+c, "");
            plainText =  preString + temp;
            len = plainText.length();
        }
        return plainText;
    }

    public String setNewPlainText(String message, int lengthOfKey) {
        String newPlainText = "";
        int index = 0;
        int i=0;
            while(index < lengthOfKey){
                char c = message.charAt(i);
                int j = (int) c;
                if(j % 2 == 1){
                    newPlainText += message.charAt(i);
                    index++;
                    newPlaintextIndexes.put(message.charAt(i), i);
                }
                i++;
            }
        return newPlainText;
    }

    public String setNewKey(String message, int lengthOfKey) {
        String key = "";
        int index = 0;
        int i = message.length()-1;
        
            while(index < lengthOfKey){
                char c = message.charAt(i);
                int j = (int) c;
                    if(j % 2 == 0){
                        key += message.charAt(i);
                        index++;//cari cara menginisiasi hashmap
                        newKeyIndexes.put(message.charAt(i), i);
                    }
                    i--;
            }
        return key;
    }

    public String encrypt(String newPlainText, String key) {
		byte[] plainTextBytes = newPlainText.getBytes();
		byte[] keyBytes = key.getBytes();
		byte[] encryptedText = new byte[plainTextBytes.length];
		for(int i = 0; i < plainTextBytes.length; i++){
			encryptedText[i] = (byte) (keyBytes[i] ^ plainTextBytes[i]);
		}
		return new String(encryptedText);
        }

    private String decrypt(String cipher, String key) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
              byte[] plainTextBytes = cipher.getBytes();
		byte[] keyBytes = key.getBytes();
		byte[] decryptedText = new byte[plainTextBytes.length];
		for(int i = 0; i < plainTextBytes.length; i++){
			decryptedText[i] = (byte) (keyBytes[i] ^ plainTextBytes[i]);
		}
		return new String(decryptedText); 
    }

   

    
}
